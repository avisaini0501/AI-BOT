{"ast":null,"code":"\"use strict\";\n\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DiscussServiceClient = void 0;\nconst jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1beta2/discuss_service_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./discuss_service_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  An API for using Generative Language Models (GLMs) in dialog applications.\n *\n *  Also known as large language models (LLMs), this API provides models that\n *  are trained for multi-turn dialog.\n * @class\n * @memberof v1beta2\n */\nclass DiscussServiceClient {\n  /**\n   * Construct an instance of DiscussServiceClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\n   *     For more information, please check the\n   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n   *     need to avoid loading the default gRPC version and want to use the fallback\n   *     HTTP implementation. Load only fallback version and pass it to the constructor:\n   *     ```\n   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n   *     const client = new DiscussServiceClient({fallback: true}, gax);\n   *     ```\n   */\n  constructor(opts, gaxInstance) {\n    var _a, _b;\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    };\n    // Ensure that options include all the required fields.\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts);\n    // Request numeric enum values if REST transport is used.\n    opts.numericEnums = true;\n    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    }\n    // Load google-gax module synchronously if needed\n    if (!gaxInstance) {\n      gaxInstance = require('google-gax');\n    }\n    // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n    // Save options to use in initialize() method.\n    this._opts = opts;\n    // Save the auth object to the client, for use by other methods.\n    this.auth = this._gaxGrpc.auth;\n    // Set useJWTAccessWithScope on the auth object.\n    this.auth.useJWTAccessWithScope = true;\n    // Set defaultServicePath on the auth object.\n    this.auth.defaultServicePath = staticMembers.servicePath;\n    // Set the default scopes in auth client if needed.\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    }\n    // Determine the client header string.\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    } else {\n      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n    }\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    }\n    // Load the applicable protos.\n    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n    // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n    this.pathTemplates = {\n      modelPathTemplate: new this._gaxModule.PathTemplate('models/{model}')\n    };\n    // Put together the default options sent with requests.\n    this._defaults = this._gaxGrpc.constructSettings('google.ai.generativelanguage.v1beta2.DiscussService', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    });\n    // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n    this.innerApiCalls = {};\n    // Add a warn function to the client constructor so it can be easily tested.\n    this.warn = this._gaxModule.warn;\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.discussServiceStub) {\n      return this.discussServiceStub;\n    }\n    // Put together the \"service stub\" for\n    // google.ai.generativelanguage.v1beta2.DiscussService.\n    this.discussServiceStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.ai.generativelanguage.v1beta2.DiscussService') :\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.ai.generativelanguage.v1beta2.DiscussService, this._opts, this._providedCustomServicePath);\n    // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n    const discussServiceStubMethods = ['generateMessage', 'countMessageTokens'];\n    for (const methodName of discussServiceStubMethods) {\n      const callPromise = this.discussServiceStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = undefined;\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n      this.innerApiCalls[methodName] = apiCall;\n    }\n    return this.discussServiceStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n  static get servicePath() {\n    return 'generativelanguage.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n  static get apiEndpoint() {\n    return 'generativelanguage.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n  static get scopes() {\n    return [];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n    return this.auth.getProjectId();\n  }\n  generateMessage(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      model: (_a = request.model) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.generateMessage(request, options, callback);\n  }\n  countMessageTokens(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      model: (_a = request.model) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.countMessageTokens(request, options, callback);\n  }\n  // --------------------\n  // -- Path templates --\n  // --------------------\n  /**\n   * Return a fully-qualified model resource name string.\n   *\n   * @param {string} model\n   * @returns {string} Resource name string.\n   */\n  modelPath(model) {\n    return this.pathTemplates.modelPathTemplate.render({\n      model: model\n    });\n  }\n  /**\n   * Parse the model from Model resource.\n   *\n   * @param {string} modelName\n   *   A fully-qualified path representing Model resource.\n   * @returns {string} A string representing the model.\n   */\n  matchModelFromModelName(modelName) {\n    return this.pathTemplates.modelPathTemplate.match(modelName).model;\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n  close() {\n    if (this.discussServiceStub && !this._terminated) {\n      return this.discussServiceStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n    return Promise.resolve();\n  }\n}\nexports.DiscussServiceClient = DiscussServiceClient;","map":{"version":3,"names":["jsonProtos","require","gapicConfig","version","DiscussServiceClient","constructor","opts","gaxInstance","_terminated","descriptors","page","stream","longrunning","batching","staticMembers","servicePath","apiEndpoint","_providedCustomServicePath","port","clientConfig","_a","fallback","_b","window","fetch","Object","assign","numericEnums","scopes","_gaxModule","_gaxGrpc","GrpcClient","_opts","auth","useJWTAccessWithScope","defaultServicePath","defaultScopes","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","_protos","loadProtoJSON","pathTemplates","modelPathTemplate","PathTemplate","_defaults","constructSettings","join","innerApiCalls","warn","initialize","discussServiceStub","createStub","lookupService","google","ai","generativelanguage","v1beta2","DiscussService","discussServiceStubMethods","methodName","callPromise","then","stub","args","Promise","reject","func","apply","err","descriptor","undefined","apiCall","createApiCall","getProjectId","callback","generateMessage","request","optionsOrCallback","options","otherArgs","headers","routingHeader","fromParams","model","countMessageTokens","modelPath","render","matchModelFromModelName","modelName","match","close","resolve","exports"],"sources":["../../../src/v1beta2/discuss_service_client.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}