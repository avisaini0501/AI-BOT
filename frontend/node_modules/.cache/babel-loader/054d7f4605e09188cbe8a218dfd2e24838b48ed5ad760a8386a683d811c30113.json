{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamDescriptor = void 0;\nconst streamingApiCaller_1 = require(\"./streamingApiCaller\");\n/**\n * A descriptor for streaming calls.\n */\nclass StreamDescriptor {\n  constructor(streamType, rest) {\n    this.type = streamType;\n    this.streaming = true;\n    this.rest = rest;\n  }\n  getApiCaller(settings) {\n    // Right now retrying does not work with gRPC-streaming, because retryable\n    // assumes an API call returns an event emitter while gRPC-streaming methods\n    // return Stream.\n    // TODO: support retrying.\n    settings.retry = null;\n    return new streamingApiCaller_1.StreamingApiCaller(this);\n  }\n}\nexports.StreamDescriptor = StreamDescriptor;","map":{"version":3,"names":["Object","defineProperty","exports","value","StreamDescriptor","streamingApiCaller_1","require","constructor","streamType","rest","type","streaming","getApiCaller","settings","retry","StreamingApiCaller"],"sources":["C:/Users/Lenovo/Desktop/clone/node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamDescriptor = void 0;\nconst streamingApiCaller_1 = require(\"./streamingApiCaller\");\n/**\n * A descriptor for streaming calls.\n */\nclass StreamDescriptor {\n    constructor(streamType, rest) {\n        this.type = streamType;\n        this.streaming = true;\n        this.rest = rest;\n    }\n    getApiCaller(settings) {\n        // Right now retrying does not work with gRPC-streaming, because retryable\n        // assumes an API call returns an event emitter while gRPC-streaming methods\n        // return Stream.\n        // TODO: support retrying.\n        settings.retry = null;\n        return new streamingApiCaller_1.StreamingApiCaller(this);\n    }\n}\nexports.StreamDescriptor = StreamDescriptor;\n//# sourceMappingURL=streamDescriptor.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAG,KAAK,CAAC;AACjC,MAAMC,oBAAoB,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC5D;AACA;AACA;AACA,MAAMF,gBAAgB,CAAC;EACnBG,WAAWA,CAACC,UAAU,EAAEC,IAAI,EAAE;IAC1B,IAAI,CAACC,IAAI,GAAGF,UAAU;IACtB,IAAI,CAACG,SAAS,GAAG,IAAI;IACrB,IAAI,CAACF,IAAI,GAAGA,IAAI;EACpB;EACAG,YAAYA,CAACC,QAAQ,EAAE;IACnB;IACA;IACA;IACA;IACAA,QAAQ,CAACC,KAAK,GAAG,IAAI;IACrB,OAAO,IAAIT,oBAAoB,CAACU,kBAAkB,CAAC,IAAI,CAAC;EAC5D;AACJ;AACAb,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}